// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (a AuraHeader) MarshalJSON() ([]byte, error) {
	type AuraHeader struct {
		ParentHash  common.Hash    `json:"parentHash"       gencodec:"required"`
		UncleHash   common.Hash    `json:"sha3Uncles"       gencodec:"required"`
		Coinbase    common.Address `json:"miner"            gencodec:"required"`
		Root        common.Hash    `json:"stateRoot"        gencodec:"required"`
		TxHash      common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom       Bloom          `json:"logsBloom"        gencodec:"required"`
		Difficulty  *hexutil.Big   `json:"difficulty"       gencodec:"required"`
		Number      *hexutil.Big   `json:"number"           gencodec:"required"`
		GasLimit    hexutil.Uint64 `json:"gasLimit"         gencodec:"required"`
		GasUsed     hexutil.Uint64 `json:"gasUsed"          gencodec:"required"`
		Time        hexutil.Uint64 `json:"timestamp"        gencodec:"required"`
		Extra       hexutil.Bytes  `json:"extraData"        gencodec:"required"`
		Step        uint64         `json:"step"             gencodec:"required"`
		SealFields  []interface{}  `json:"sealFields"       gencodec:"required"           rlp:"-"`
		Signature   []byte         `json:"-"`
		Hash        common.Hash    `json:"hash"`
	}
	var enc AuraHeader
	enc.ParentHash = a.ParentHash
	enc.UncleHash = a.UncleHash
	enc.Coinbase = a.Coinbase
	enc.Root = a.Root
	enc.TxHash = a.TxHash
	enc.ReceiptHash = a.ReceiptHash
	enc.Bloom = a.Bloom
	enc.Difficulty = (*hexutil.Big)(a.Difficulty)
	enc.Number = (*hexutil.Big)(a.Number)
	enc.GasLimit = hexutil.Uint64(a.GasLimit)
	enc.GasUsed = hexutil.Uint64(a.GasUsed)
	enc.Time = hexutil.Uint64(a.Time)
	enc.Extra = a.Extra
	enc.Step = a.Step
	enc.SealFields = a.SealFields
	enc.Signature = a.Signature
	enc.Hash = a.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (a *AuraHeader) UnmarshalJSON(input []byte) error {
	type AuraHeader struct {
		ParentHash  *common.Hash    `json:"parentHash"       gencodec:"required"`
		UncleHash   *common.Hash    `json:"sha3Uncles"       gencodec:"required"`
		Coinbase    *common.Address `json:"miner"            gencodec:"required"`
		Root        *common.Hash    `json:"stateRoot"        gencodec:"required"`
		TxHash      *common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash *common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom       *Bloom          `json:"logsBloom"        gencodec:"required"`
		Difficulty  *hexutil.Big    `json:"difficulty"       gencodec:"required"`
		Number      *hexutil.Big    `json:"number"           gencodec:"required"`
		GasLimit    *hexutil.Uint64 `json:"gasLimit"         gencodec:"required"`
		GasUsed     *hexutil.Uint64 `json:"gasUsed"          gencodec:"required"`
		Time        *hexutil.Uint64 `json:"timestamp"        gencodec:"required"`
		Extra       *hexutil.Bytes  `json:"extraData"        gencodec:"required"`
		Step        *uint64         `json:"step"             gencodec:"required"`
		SealFields  []interface{}   `json:"sealFields"       gencodec:"required"           rlp:"-"`
		Signature   []byte          `json:"-"`
	}
	var dec AuraHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for AuraHeader")
	}
	a.ParentHash = *dec.ParentHash
	if dec.UncleHash == nil {
		return errors.New("missing required field 'sha3Uncles' for AuraHeader")
	}
	a.UncleHash = *dec.UncleHash
	if dec.Coinbase == nil {
		return errors.New("missing required field 'miner' for AuraHeader")
	}
	a.Coinbase = *dec.Coinbase
	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for AuraHeader")
	}
	a.Root = *dec.Root
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionsRoot' for AuraHeader")
	}
	a.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receiptsRoot' for AuraHeader")
	}
	a.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for AuraHeader")
	}
	a.Bloom = *dec.Bloom
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for AuraHeader")
	}
	a.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for AuraHeader")
	}
	a.Number = (*big.Int)(dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for AuraHeader")
	}
	a.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for AuraHeader")
	}
	a.GasUsed = uint64(*dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for AuraHeader")
	}
	a.Time = uint64(*dec.Time)
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for AuraHeader")
	}
	a.Extra = *dec.Extra
	if dec.Step == nil {
		return errors.New("missing required field 'step' for AuraHeader")
	}
	a.Step = *dec.Step
	if dec.SealFields == nil {
		return errors.New("missing required field 'sealFields' for AuraHeader")
	}
	a.SealFields = dec.SealFields
	if dec.Signature != nil {
		a.Signature = dec.Signature
	}
	return nil
}
